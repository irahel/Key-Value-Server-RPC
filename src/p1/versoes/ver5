// Implementation of a KeyValueServer. Students should write their code in this file.
package p0

import (
    "net"
    "strconv"
    "bufio"
    "strings"
	"fmt"
)

//Estrutura servidor chave/valor
type keyValueServer struct {
    // TODO: implement this!
	//Lista de clientes conectados
	connectedClients chan map[*net.TCPConn]*client
    //Servidor TCP
    server *net.TCPListener
    //Canais
    // P/ receber mensagens (put / get) do client
    broadcastChannel chan []byte
    // P/ enviar flag de fechar todas as conexoes
    signalChannel chan bool
    queryPut chan commandPut
    queryGet chan string
}

//Estrutura cliente
type client struct {
	connection       *net.TCPConn
	server           *keyValueServer
	FromShellChannel chan []byte
	ToShellChannel   chan []byte
}

type commandPut struct{
	commandType string
	key	string
	value []byte
}

//Cria e retorna um novo servidor
func New() KeyValueServer {
    // TODO: implement this!
    //Cria um novo servidor
    newServer := &keyValueServer{
		connectedClients: make(chan map[*net.TCPConn]*client, 1),
		//Inicia canais
		signalChannel: make(chan bool),
		broadcastChannel: make(chan []byte),
		queryPut: make(chan commandPut),
		queryGet: make(chan string),
	}
	init_db()
	newClientMap := make(map[*net.TCPConn]*client)
	newServer.connectedClients <- newClientMap
	//Retorna
    return newServer
}

//Inicia o servidor
func (kvs *keyValueServer) Start(port int) error {
    // TODO: implement this!
    //Obtendo o endereço TCP, sobre o endereço localhost + porta passada.
    myAddress, addressError := net.ResolveTCPAddr("tcp","localhost:" +strconv.Itoa(port))
    //Teste se deu erro.
    if !(addressError == nil) {
        return addressError
    }
    //Iniciando o server a escutar no protocolo tcp, sobre o endereço obtido.
    server, serverError := net.ListenTCP("tcp", myAddress)
	//Teste se deu erro
	if !(serverError == nil){
		return serverError
	}
    kvs.server = server

	//ok
    go kvs.acceptConnection()
    go kvs.helperBroadcast()


    go kvs.helperAccessPut()

    return nil
}

//Fecha o servidor e todos os clientes conectados
func (kvs *keyValueServer) Close() {
    // TODO: implement this!
    //Fecha o servidor
    kvs.server.Close()
	clientList := <-kvs.connectedClients
	for _, atual := range clientList {
		delete(clientList, atual.connection)
		atual.connection.Close()
		//c.toCloseSend <- 1
	}
	kvs.connectedClients <- clientList
	close(kvs.signalChannel)
    //Escreve a flag "true" no canal
    //kvs.signalChannel <- true
}

//Retorna o numero de usuarios conectados
func (kvs *keyValueServer) Count() int {
    // TODO: implement this!
    //Retorna o numero de usuarios
	clientList := <-kvs.connectedClients
	clientSize := len(clientList)
	kvs.connectedClients <- clientList
	return clientSize
}
// TODO: add additional methods/functions below!

//Funcao para ficar aceitando conexoes
func (kvs *keyValueServer) acceptConnection(){
    for true{
        //Aceita uma conexao
        newClient, acceptError := kvs.server.AcceptTCP()
        //Testa erro
        if !(acceptError == nil){
            return
        }
        //Novo cliente
		clientAdd := &client{
			connection:       newClient,
			server:           kvs,
			FromShellChannel: make(chan []byte, 1),
			ToShellChannel:   make(chan []byte, 500),
		}
        //Adiciona o novo cliente
        clientList := <- kvs.connectedClients
        clientList[clientAdd.connection] = clientAdd
		kvs.connectedClients <- clientList
        //Chama a funcao de gerencia para o novo cliente
        go clientAdd.helperFromShell()
        go clientAdd.helperToShell()
    }
}

//Funcao para gerenciar a entrada de um cliente
func (clie *client ) helperFromShell(){
    //Buffer de leitura
    buffReader := bufio.NewReader(clie.connection)
    for true{
        //Recebe uma mensagem, ate o /n
        menssage, menssageError := buffReader.ReadString('\n')
		//print("mensagem: \n")
        //print(menssage)
        //print("-------------\n")
        //Testa erro
        if !(menssageError == nil) {
        	clientList := <- clie.server.connectedClients
        	delete(clientList, clie.connection)
        	clie.server.connectedClients <- clientList
        	clie.connection.Close()

        	//fecha a conexao
            return
        }

		menssageArray := strings.Split(menssage, ",")
		if len(menssageArray) == 3{
			newCommand := commandPut{
				key: menssageArray[1],
				value: []byte(strings.TrimSpace(menssageArray[2])),
			}
			clie.server.queryPut <- newCommand

		}else{
			clie.server.queryGet <- menssageArray[1]
		}

    }
}

func (clie *client ) helperToShell(){
	for true{
		toWrite, writeError := <-clie.ToShellChannel
		if !writeError {
			return
		}
		_, err := clie.connection.Write(toWrite)
		if err != nil {
			return
		}
	}
}

func (kvs *keyValueServer) helperBroadcast(){

	 for true{
		 toBroadcast, broadcastError := <-kvs.broadcastChannel
		 	if !broadcastError{
		 		return
			}
			clients := <- kvs.connectedClients
			for _, atual := range clients{
				if len(atual.ToShellChannel) < 500{
					atual.ToShellChannel <- toBroadcast
				}

				//PODE DAR ERRO AQUI, CUIDADO, ATENÇAO, ION ION ION ION

				/*
				select {
				case atual.ToShellChannel <- toBroadcast:
				//PODE DAR ERRO AQUI, CUIDADO, ATENÇAO, ION ION ION ION
					break

				default:
					break
				}
				 */
			}
			kvs.connectedClients <- clients
	 }
}

func (kvs *keyValueServer) helperAccessPut(){
	for true {
		select {
		case newPut := <- kvs.queryPut:
			put(newPut.key, newPut.value)
			break
		case newGet := <- kvs.queryGet:
			kvs.broadcastChannel <- []byte(fmt.Sprintf("%v,%v\n", strings.TrimSpace(newGet), string(get(strings.TrimSpace(newGet)))))
		}
	}
}
