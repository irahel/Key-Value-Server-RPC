// Implementation of a KeyValueServer. Students should write their code in this file.
package p0

import (
    //"bytes"
    //"fmt"
    "net"
    "strconv"
    "bufio"
    "strings"
	"fmt"
)

//Estrutura servidor chave/valor
type keyValueServer struct {
    // TODO: implement this!
	//Lista de clientes conectados
	connectedClients chan map[*net.TCPConn]*client
    //Servidor TCP
    server *net.TCPListener
    //Canais
    // P/ receber mensagens (put / get) do cliente
    putGetChannel chan []string
    // P/ enviar flag de fechar todas as conexoes
    signalChannel chan bool
}

//Estrutura cliente
type client struct {
	connection 			*net.TCPConn
	server      		*keyValueServer
	toShellChannel    	chan []byte
	FromShellChannel    chan []byte
}

//Cria e retorna um novo servidor
func New() KeyValueServer {
    // TODO: implement this!
    //Cria um novo servidor
    newServer := &keyValueServer{
		connectedClients: make(chan map[*net.TCPConn]*client, 1),
		//Inicia canais
		putGetChannel: make(chan []string),
		signalChannel: make(chan bool),
	}
	newClientMap := make(map[*net.TCPConn]*client, 1)
	newServer.connectedClients <- newClientMap
	//Retorna
    return newServer
}

//Inicia o servidor
func (kvs *keyValueServer) Start(port int) error {
    // TODO: implement this!
    //Obtendo o endereço TCP, sobre o endereço localhost + porta passada.
    myAddress, addressError := net.ResolveTCPAddr("tcp","localhost:" +strconv.Itoa(port))
    //Teste se deu erro.
    if !(addressError == nil) {
        return addressError
    }
    //Iniciando o server a escutar no protocolo tcp, sobre o endereço obtido.
    server, serverError := net.ListenTCP("tcp", myAddress)
	//Teste se deu erro
	if !(serverError == nil){
		return serverError
	}
    kvs.server = server


    go acceptConnection(kvs)

    go helperBank(kvs)
    go filipe(kvs)

    return nil
}

//Fecha o servidor e todos os clientes conectados
func (kvs *keyValueServer) Close() {
    // TODO: implement this!
    //Fecha o servidor
    kvs.server.Close()
	clientList := <-kvs.connectedClients
	for _, atual := range clientList {
		delete(clientList, atual.connection)
		atual.connection.Close()
		//c.toCloseSend <- 1
	}
	kvs.connectedClients <- clientList
	close(kvs.putGetChannel)
	close(kvs.signalChannel)
    //Escreve a flag "true" no canal
    //kvs.signalChannel <- true
}

//Retorna o numero de usuarios conectados
func (kvs *keyValueServer) Count() int {
    // TODO: implement this!
    //Retorna o numero de usuarios
	clientList := <-kvs.connectedClients
	clientSize := len(clientList)
	kvs.connectedClients <- clientList
	return clientSize
}

//Funcao para ficar aceitando conexoes
func acceptConnection(kvs *keyValueServer){


    for true{
        //Aceita uma conexao
        newClient, acceptError := kvs.server.AcceptTCP()
        //Testa erro
        if !(acceptError == nil){
            return
        }
        //Novo cliente
		clientAdd := &client{
			connection: newClient,
			server: kvs,
			toShellChannel: make(chan []byte, 1),
			FromShellChannel: make(chan []byte, 500),
		}
        //Adiciona o novo cliente
        clientList := <- kvs.connectedClients
        clientList[newClient] = clientAdd
		kvs.connectedClients <- clientList
        //Chama a funcao de gerencia para o novo cliente
        go helperConnection(kvs, newClient)

    }
}

//Funcao para gerenciar a entrada de um cliente
func helperConnection(kvs *keyValueServer, conn net.Conn){
    //Buffer de leitura
    buffReader := bufio.NewReader(conn)
    for true{
        //Recebe uma mensagem, ate o /n
        menssage, menssageError := buffReader.ReadString('\n')
		//print("mensagem: \n")
        //print(menssage)
        //print("-------------\n")
        //Testa erro
        if !(menssageError == nil) {
            return
        }
		//print("split : \n")

		//for indice, dancakuduro := range strings.Split(menssage, ","){
		//	print("indice: ")
		//	print(indice)
		//	print("   ")
		//	print("msg:  ")
		//	print(dancakuduro)
		//	print("\n")
//		}

		//Escreve no canal a mensagem 'organizada'
        kvs.putGetChannel <- strings.Split(menssage, ",")
		//print("-------------\n")
    }
}

//"put", "chave", "valor"
//"get", "chave"

//Funcao para gerenciar acesso ao banco
func helperBank(kvs *keyValueServer){
    for true{
        //Recebe um comando do canal
        command := <- kvs.putGetChannel
        //Define se o comando e put ou get
        if len(command) == 3{
            //Se for put
            //print("enter in put: ")
            //print(command[1])
            //print("  ")
            //print(command[2])
            put(command[1], []byte(strings.TrimSpace(command[2])))
            //print("\n")
        }else{
        	//Se for get
			//print("enter in get: ")
        	//print(string(get(command[1])))
			//print("\n")

			//res := fmt.Sprintf("%v,%v\n", strings.TrimSpace(command[1]), string(get(strings.TrimSpace(command[1]))))
        	helperBroadcast(kvs, fmt.Sprintf("%v,%v\n", strings.TrimSpace(command[1]), string(get(strings.TrimSpace(command[1])))))

        }
    }
}

//Funcao que gerencia o envio de mensagens para todos os clientes
func helperBroadcast(kvs *keyValueServer,menssage string){
	//print("mensagem:   ")
	//print(string(menssage))
	//print("\n")
    //Envia para todos
    clientList := <- kvs.connectedClients
    for _, atual := range clientList{
        atual.connection.Write([]byte(menssage))
    }
    kvs.connectedClients <- clientList
}

//Funcao que mata todas as conexoes de clientes
func filipe(kvs *keyValueServer){
	print("filipe in action, go planeta \n")
    for true{
        //Espera receber o sinal
        <- kvs.signalChannel
        //Quando receber
		clientList := <- kvs.connectedClients
        //Fecha as conexoes
        for _, atual := range clientList{
            atual.connection.Close()
			delete(clientList, atual.connection)
        }
		kvs.connectedClients <- clientList
    }
}

func remove(list []*client, toRemove net.Conn) []*client{
	newList := make([]*client, 0)
	for _, compare := range list{
		if !(compare.connection == toRemove) {
			newList = append(newList, compare)
		}
	}
	return  newList
}

// TODO: add additional methods/functions below!

