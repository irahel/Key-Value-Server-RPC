// Implementation of a KeyValueServer. Students should write their code in this file.

package p0

import (
    //"bytes"
    //"fmt"
    "net"
    "strconv"
    "bufio"
    "strings"
)

//Estrutura servidor chave/valor
type keyValueServer struct {
    // TODO: implement this!
    //Servidor TCP
    server *net.TCPListener
    //Canais
    // P/ receber mensagens (put / get) do cliente
    put_get_channel chan []string
    // P/ enviar flag de fechar todas as conexoes
    signal_channel chan bool
    // P/ guardar a lista de clientes
    clients_channel chan []net.Conn
}

//Cria e retorna um novo servidor
func New() KeyValueServer {
    // TODO: implement this!
    new_server := &keyValueServer{}
    //Inicia canais
    new_server.put_get_channel = make(chan []string)
    new_server.signal_channel = make(chan bool)
    new_server.clients_channel = make(chan []net.Conn)
    return new_server
}

//Inicia o servidor
func (kvs *keyValueServer) Start(port int) error {
    // TODO: implement this!
    //Obtendo o endereço TCP, sobre o endereço localhost + porta passada.
    my_adrress, address_error := net.ResolveTCPAddr("tcp","localhost:" +strconv.Itoa(port))
    //Teste se deu erro.
    if !(address_error == nil) {
        return address_error
    }
    //kvs.server, err = net.Listen("tcp", "localhost:" +strconv.Itoa(port))
    //Iniciando o server a escutar no protocolo tcp, sobre o endereço obtido.
    server, server_error := net.ListenTCP("tcp", my_adrress)
    kvs.server = server
    //Teste se deu erro
    if !(server_error == nil){
        return server_error
    }

    go accept_connection(kvs)
    go helper_bank(kvs)
    go filipe(kvs)

    return nil
}

//Fecha o servidor e todos os clientes conectados
func (kvs *keyValueServer) Close() {
    // TODO: implement this!
    //Fecha o servidor
    kvs.server.Close()
    //Escreve a flag "true" no canal
    kvs.signal_channel <- true
}

//Retorna o numero de usuarios conectados
func (kvs *keyValueServer) Count() int {
    // TODO: implement this!
    //Recupera a lista de clientes
    count := <- kvs.clients_channel
    //Conta
    count_number := len(count)
    //Devolve a lista de clientes
    kvs.clients_channel <- count
    //Retorna o numero de usuarios
    return count_number

}

//Funcao para ficar aceitando conexoes
func accept_connection(kvs *keyValueServer){
    for true{
        //Aceita uma conexao
        new_client, accept_error := kvs.server.Accept()
        //Testa erro
        if !(accept_error == nil){
            return
        }
        //Recupera a lista de clientes
        clients := <- kvs.clients_channel
        //Adiciona o novo cliente
        clients = append(clients, new_client)
        //Chama a funcao de gerencia para o novo cliente
        go helper_connection(kvs, new_client)
        //Devolve a lista de clientes para o canal
        kvs.clients_channel <- clients
    }
}

//Funcao para gerenciar a entrada de um cliente
func helper_connection(kvs *keyValueServer, conn net.Conn){
    //Buffer de leitura
    buff_reader := bufio.NewReader(conn)
    for true{
        //Recebe uma mensagem, ate o /n
        menssage, menssage_error := buff_reader.ReadString('\n')
        //Testa erro
        if !(menssage_error == nil) {
            return
        }
        //Escreve no canal a mensagem 'organizada'
        kvs.put_get_channel <- strings.Split(menssage, ",")
    }
}

//"put", "chave", "valor"
//"get", "chave"

//Funcao para gerenciar acesso ao banco
func helper_bank(kvs *keyValueServer){
    for true{
        //Recebe um comando do canal
        command := <- kvs.put_get_channel
        //Define se o comando e put ou get
        if len(command) == 3{
            //Se for put
            put(command[1], []byte(command[2]))
        }else{
            //Se for get
            helper_broadcast(kvs, append(append([]byte(command[1]), byte(',')),get(command[1])...))
        }
    }
}

//Funcao que gerencia o envio de mensagens para todos os clientes
func helper_broadcast(kvs *keyValueServer,menssage []byte){
    //Recupera a lista de clientes
    clients := <- kvs.clients_channel
    //Envia para todos
    for _, atual := range clients{
        atual.Write(menssage)
    }
}

//Funcao que mata todas as conexoes de clientes
func filipe(kvs *keyValueServer){
    for true{
        //Espera receber o sinal
        <- kvs.signal_channel
        //Quando receber
        //Recupera a lista de clientes
        clients := <- kvs.clients_channel
        //Fecha as conexoes
        for _, atual := range clients{
            atual.Close()
        }
    }
}


// TODO: add additional methods/functions below!

